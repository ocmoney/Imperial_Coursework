import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.stats.diagnostic import het_white
from scipy import stats

def load_data(file_path):
    """Load data from a CSV file into a pandas DataFrame."""
    return pd.read_csv(file_path)

def create_dummy_variables(data):
    """
    Create dummy variables for the trip generation model according to Table 1.
    
    Segments:
    1: Low income (≤20k), 0 cars
    2: Low income (≤20k), 1 car  
    3: Low income (≤20k), 2+ cars
    4: Medium income (21k-70k), 0 cars
    5: Medium income (21k-70k), 1 car
    6: Medium income (21k-70k), 2+ cars
    7: High income (>70k), 0 cars
    8: High income (>70k), 1 car
    9: High income (>70k), 2+ cars
    """
    
    # Create income categories, astype converts boolean to int (0/1)
    data['LowInc'] = (data['Annual income'] <= 20).astype(int)
    data['MedInc'] = ((data['Annual income'] > 20) & (data['Annual income'] <= 70)).astype(int)
    data['HigInc'] = (data['Annual income'] > 70).astype(int)
    
    # Create car ownership categories
    data['0Cars'] = (data['Cars'] == 0).astype(int)
    data['1Car'] = (data['Cars'] == 1).astype(int)
    data['2+Cars'] = (data['Cars'] >= 2).astype(int)
    
    # Create interaction dummy variables as specified in the model
    data['1CarLowInc'] = (data['1Car'] & data['LowInc']).astype(int)
    data['1CarMedInc'] = (data['1Car'] & data['MedInc']).astype(int)
    data['1CarHigInc'] = (data['1Car'] & data['HigInc']).astype(int)
    
    # Create segment variable for reference
    data['Segment'] = 0
    data.loc[(data['LowInc'] == 1) & (data['0Cars'] == 1), 'Segment'] = 1
    data.loc[(data['LowInc'] == 1) & (data['1Car'] == 1), 'Segment'] = 2
    data.loc[(data['LowInc'] == 1) & (data['2+Cars'] == 1), 'Segment'] = 3
    data.loc[(data['MedInc'] == 1) & (data['0Cars'] == 1), 'Segment'] = 4
    data.loc[(data['MedInc'] == 1) & (data['1Car'] == 1), 'Segment'] = 5
    data.loc[(data['MedInc'] == 1) & (data['2+Cars'] == 1), 'Segment'] = 6
    data.loc[(data['HigInc'] == 1) & (data['0Cars'] == 1), 'Segment'] = 7
    data.loc[(data['HigInc'] == 1) & (data['1Car'] == 1), 'Segment'] = 8
    data.loc[(data['HigInc'] == 1) & (data['2+Cars'] == 1), 'Segment'] = 9

    print("data after segment creation:", data.head())
    
    return data

def estimate_trip_generation_model(data):
    """
    Estimate the linear regression model for trip generation.
    
    Model specification:
    Ti = α + β_MedInc * δ_MedInc,i + β_HigInc * δ_HigInc,i + 
         β_1CarLowInc * δ_1CarLowInc,i + β_1CarMedInc * δ_1CarMedInc,i + 
         β_1CarHigInc * δ_1CarHigInc,i + β_2+Cars * δ_2+Cars,i + 
         β_HHSize * HHSize_i
    """
    
    # Define dependent variable
    y = data['NoTrips']
    
    # Define independent variables according to the model specification
    X = data[['MedInc', 'HigInc', '1CarLowInc', '1CarMedInc', '1CarHigInc', '2+Cars', 'HH Size']]
    
    # Add constant term, this is the intercept α. It represents the baseline trips for low income, 0 cars household and zero size household.
    X = sm.add_constant(X)
    
    # Fit the model
    model = sm.OLS(y, X).fit()
    
    return model, X, y

def print_model_results(model, data):
    """Print comprehensive model results in professional format."""
    
    print("\n" + "="*90)
    print(" "*25 + "TRIP GENERATION MODEL RESULTS")
    print("="*90)
    
    # Model specification
    print("\nModel Specification:")
    print("  Ti = alpha + beta_MedInc*delta_MedInc,i + beta_HigInc*delta_HigInc,i +")
    print("       beta_1CarLowInc*delta_1CarLowInc,i + beta_1CarMedInc*delta_1CarMedInc,i +")
    print("       beta_1CarHigInc*delta_1CarHigInc,i + beta_2+Cars*delta_2+Cars,i +")
    print("       beta_HHSize*HHSize_i + epsilon_i")
    
    print(f"\nwhere Ti    = number of trips generated by household i")
    print(f"      alpha = constant term (baseline for low-income, 0-car households)")
    
    # Sample and model information
    print(f"\nSample Information:")
    print(f"  Observations:        {int(model.nobs):,}")
    print(f"  Dependent Variable:  Number of Trips (NoTrips)")
    print(f"  Estimation Method:   Ordinary Least Squares (OLS)")
    
    # Model fit statistics - formatted as a table
    print(f"\nModel Fit Statistics:")
    print("-" * 50)
    print(f"  R-squared:           {model.rsquared:8.4f}")
    print(f"  Adjusted R-squared:  {model.rsquared_adj:8.4f}")
    print(f"  F-statistic:         {model.fvalue:8.2f}")
    print(f"  Prob(F-statistic):   {model.f_pvalue:8.2e}")
    print(f"  Root MSE:            {np.sqrt(model.mse_resid):8.4f}")
    print(f"  Log-Likelihood:      {model.llf:8.2f}")
    print(f"  AIC:                 {model.aic:8.2f}")
    print(f"  BIC:                 {model.bic:8.2f}")
    
    # Parameter estimates table
    print(f"\nParameter Estimates:")
    print("=" * 85)
    print(f"{'Variable':<20} {'Coeff.':<10} {'Std.Err.':<10} {'t-stat':<8} {'P>|t|':<8} {'[95% CI]':<20}")
    print("-" * 85)
    
    conf_int = model.conf_int()
    
    for i, var in enumerate(model.params.index):
        coef = model.params[var]
        std_err = model.bse[var]
        t_stat = model.tvalues[var]
        p_value = model.pvalues[var]
        ci_lower = conf_int.iloc[i, 0]
        ci_upper = conf_int.iloc[i, 1]
        
        # Format variable name for display
        var_descriptions = {
            'const': 'Constant (alpha)',
            'MedInc': 'Medium Income',
            'HigInc': 'High Income', 
            '1CarLowInc': '1 Car x Low Income',
            '1CarMedInc': '1 Car x Med Income',
            '1CarHigInc': '1 Car x High Income',
            '2+Cars': '2+ Cars',
            'HH Size': 'Household Size'
        }
        
        display_name = var_descriptions.get(var, var)
            
        # Significance stars
        if p_value < 0.001:
            sig = '***'
        elif p_value < 0.01:
            sig = '**'
        elif p_value < 0.05:
            sig = '*'
        elif p_value < 0.1:
            sig = '.'
        else:
            sig = '   '
            
        ci_str = f"[{ci_lower:6.3f}, {ci_upper:6.3f}]"
        
        print(f"{display_name:<20} {coef:9.4f}{sig} {std_err:9.4f} {t_stat:7.3f} {p_value:7.4f} {ci_str}")
    
    print("-" * 85)
    print("Significance: *** p<0.001, ** p<0.01, * p<0.05, . p<0.1")
    
    # Interpretation note
    print(f"\nInterpretation Notes:")
    print(f"- Constant: Baseline trips for low-income, 0-car households (intercept)")
    print(f"- Income effects: Additional trips relative to low-income baseline")  
    print(f"- Car effects: Additional trips from car ownership within income groups")
    print(f"- HH Size: Additional trips per additional household member")
    print(f"- For low-income, 0-car, 1-person household: {model.params['const'] + model.params['HH Size']:.3f} trips expected")
    
    # Model diagnostics
    print(f"\nModel Diagnostics:")
    print("-" * 30)
    residuals = model.resid
    print(f"  Residual Std. Error: {np.sqrt(model.mse_resid):6.4f} on {int(model.df_resid)} degrees of freedom")
    print(f"  Residual Range:      [{residuals.min():6.3f}, {residuals.max():6.3f}]")
    print(f"  Durbin-Watson:       {sm.stats.stattools.durbin_watson(residuals):6.4f}")
    
    # Additional model information
    jarque_bera = sm.stats.jarque_bera(residuals)
    print(f"  Jarque-Bera (normality): {jarque_bera[0]:6.3f} (p-value: {jarque_bera[1]:6.4f})")
    
    print("=" * 90)

def analyze_segments(data):
    """Analyze trip generation by household segments."""
    
    print(f"\n" + "="*90)
    print(" "*25 + "HOUSEHOLD SEGMENT ANALYSIS")
    print("="*90)
    
    segment_analysis = data.groupby('Segment').agg({
        'NoTrips': ['count', 'mean', 'std'],
        'Annual income': 'mean',
        'Cars': 'mean',
        'HH Size': 'mean'
    }).round(3)
    
    # Flatten column names
    segment_analysis.columns = ['Count', 'Mean_Trips', 'Std_Trips', 'Mean_Income', 'Mean_Cars', 'Mean_HHSize']
    
    print("\nSegment Definitions (Income × Car Ownership Matrix):")
    print("-" * 60)
    print("                    │   0 Cars   │   1 Car    │  2+ Cars   │")
    print("────────────────────┼────────────┼────────────┼────────────┤")
    print("Low Income (≤20k)   │     1      │     2      │     3      │")
    print("Medium (21k-70k)    │     4      │     5      │     6      │") 
    print("High Income (>70k)  │     7      │     8      │     9      │")
    print("-" * 60)
    
    print(f"\nDescriptive Statistics by Segment:")
    print("=" * 90)
    print(f"{'Seg':<4} {'N':<6} {'Mean':<8} {'Std':<8} {'Income':<8} {'Cars':<6} {'HHSize':<7} {'Description':<25}")
    print("-" * 90)
    
    segment_descriptions = {
        1: "Low Inc, 0 Cars",
        2: "Low Inc, 1 Car", 
        3: "Low Inc, 2+ Cars",
        4: "Med Inc, 0 Cars",
        5: "Med Inc, 1 Car",
        6: "Med Inc, 2+ Cars",
        7: "High Inc, 0 Cars", 
        8: "High Inc, 1 Car",
        9: "High Inc, 2+ Cars"
    }
    
    total_households = 0
    total_trips = 0
    
    for seg in range(1, 10):
        if seg in segment_analysis.index:
            row = segment_analysis.loc[seg]
            count = int(row['Count'])
            mean_trips = row['Mean_Trips']
            std_trips = row['Std_Trips']
            mean_income = row['Mean_Income']
            mean_cars = row['Mean_Cars']
            mean_hhsize = row['Mean_HHSize']
            description = segment_descriptions[seg]
            
            total_households += count
            total_trips += count * mean_trips
            
            print(f"{seg:<4} {count:<6} {mean_trips:<8.3f} {std_trips:<8.3f} {mean_income:<8.1f} {mean_cars:<6.1f} {mean_hhsize:<7.2f} {description}")
        else:
            description = segment_descriptions[seg]
            print(f"{seg:<4} {'0':<6} {'--':<8} {'--':<8} {'--':<8} {'--':<6} {'--':<7} {description}")
    
    print("-" * 90)
    print(f"Total: {total_households:,} households, {total_trips/total_households:.3f} avg trips per household")
    
    # Summary by income group
    print(f"\nSummary by Income Group:")
    print("-" * 50)
    
    income_summary = data.groupby(['LowInc', 'MedInc', 'HigInc']).agg({
        'NoTrips': ['count', 'mean'],
        'Cars': 'mean',
        'HH Size': 'mean'
    }).round(3)
    
    print(f"Low Income:    {data[data['LowInc']==1]['NoTrips'].count():4} households, {data[data['LowInc']==1]['NoTrips'].mean():.3f} avg trips")
    print(f"Medium Income: {data[data['MedInc']==1]['NoTrips'].count():4} households, {data[data['MedInc']==1]['NoTrips'].mean():.3f} avg trips") 
    print(f"High Income:   {data[data['HigInc']==1]['NoTrips'].count():4} households, {data[data['HigInc']==1]['NoTrips'].mean():.3f} avg trips")
    
    # Summary by car ownership
    print(f"\nSummary by Car Ownership:")
    print("-" * 50)
    print(f"0 Cars:        {data[data['0Cars']==1]['NoTrips'].count():4} households, {data[data['0Cars']==1]['NoTrips'].mean():.3f} avg trips")
    print(f"1 Car:         {data[data['1Car']==1]['NoTrips'].count():4} households, {data[data['1Car']==1]['NoTrips'].mean():.3f} avg trips")
    print(f"2+ Cars:       {data[data['2+Cars']==1]['NoTrips'].count():4} households, {data[data['2+Cars']==1]['NoTrips'].mean():.3f} avg trips")
    print("=" * 90)

def plot_data(data, model):
    """Create diagnostic plots for the regression model."""
    
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    
    # Residuals vs Fitted
    fitted = model.fittedvalues
    residuals = model.resid
    
    axes[0, 0].scatter(fitted, residuals, alpha=0.6)
    axes[0, 0].axhline(y=0, color='red', linestyle='--')
    axes[0, 0].set_xlabel('Fitted Values')
    axes[0, 0].set_ylabel('Residuals')
    axes[0, 0].set_title('Residuals vs Fitted Values')
    
    # Q-Q plot
    stats.probplot(residuals, dist="norm", plot=axes[0, 1])
    axes[0, 1].set_title('Q-Q Plot of Residuals')
    
    # Histogram of residuals
    axes[1, 0].hist(residuals, bins=30, edgecolor='black', alpha=0.7)
    axes[1, 0].set_xlabel('Residuals')
    axes[1, 0].set_ylabel('Frequency')
    axes[1, 0].set_title('Distribution of Residuals')
    
    # Trips by segment
    segment_means = data.groupby('Segment')['NoTrips'].mean()
    axes[1, 1].bar(segment_means.index, segment_means.values)
    axes[1, 1].set_xlabel('Household Segment')
    axes[1, 1].set_ylabel('Mean Number of Trips')
    axes[1, 1].set_title('Mean Trips by Household Segment')
    axes[1, 1].set_xticks(range(1, 10))
    
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    # Load and prepare data
    print("Loading data...")
    data_file = "Data_CW1.csv"
    data = load_data(data_file)
    
    print("Creating dummy variables...")
    data = create_dummy_variables(data)
    
    print("Estimating trip generation model...")
    model, X, y = estimate_trip_generation_model(data)
    
    # Print results
    print_model_results(model, data)
    
    # Segment analysis
    analyze_segments(data)
    
    # Create plots
    print("\nCreating diagnostic plots...")
    plot_data(data, model)